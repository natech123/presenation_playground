{
  "virtual_columns": {
    "trip_duration_min": "((dropoff_datetime - pickup_datetime) / scalar_timedelta(1, 'm'))",
    "trip_speed_mph": "(trip_distance / ((dropoff_datetime - pickup_datetime) / scalar_timedelta(1, 'h')))",
    "dropoff_latitude": "fillna(__dropoff_latitude, value=40.76)",
    "pickup_latitude": "fillna(__pickup_latitude, value=40.76)",
    "dropoff_longitude": "fillna(__dropoff_longitude, value=-73.99)",
    "pickup_longitude": "fillna(__pickup_longitude, value=-73.99)",
    "pickup_time": "(dt_hour(pickup_datetime) + (dt_minute(pickup_datetime) / 60.0))",
    "pickup_day": "dt_dayofweek(pickup_datetime)",
    "pickup_month": "(dt_month(pickup_datetime) - 1)",
    "pickup_is_weekend": "astype((pickup_day >= 5), 'int')",
    "arc_distance": "_jit(pickup_latitude, pickup_longitude, dropoff_latitude, dropoff_longitude)",
    "direction_angle": "_jit_1(pickup_latitude, dropoff_latitude, pickup_longitude, dropoff_longitude)",
    "PCA_pickup_0": "dot_product([(pickup_longitude - -73.98035980351436), (pickup_latitude - 40.752448842982425)], arg_numpy_array)",
    "PCA_pickup_1": "dot_product([(pickup_longitude - -73.98035980351436), (pickup_latitude - 40.752448842982425)], arg_numpy_array_1)",
    "PCA_dropoff_0": "dot_product([(dropoff_longitude - -73.9783702921069), (dropoff_latitude - 40.75290481075101)], arg_numpy_array_2)",
    "PCA_dropoff_1": "dot_product([(dropoff_longitude - -73.9783702921069), (dropoff_latitude - 40.75290481075101)], arg_numpy_array_3)",
    "pickup_time_x": "cos(((6.283185307179586 * pickup_time) / 24))",
    "pickup_time_y": "sin(((6.283185307179586 * pickup_time) / 24))",
    "pickup_day_x": "cos(((6.283185307179586 * pickup_day) / 7))",
    "pickup_day_y": "sin(((6.283185307179586 * pickup_day) / 7))",
    "pickup_month_x": "cos(((6.283185307179586 * pickup_month) / 12))",
    "pickup_month_y": "sin(((6.283185307179586 * pickup_month) / 12))",
    "direction_angle_x": "cos(((6.283185307179586 * direction_angle) / 360))",
    "direction_angle_y": "sin(((6.283185307179586 * direction_angle) / 360))",
    "standard_scaled_arc_distance": "((arc_distance - 1.1007830867857864) / 0.8311706820694716)",
    "predicted_duration_min": "incremental_prediction_function(PCA_pickup_0, PCA_pickup_1, PCA_dropoff_0, PCA_dropoff_1, standard_scaled_arc_distance, pickup_time_x, pickup_day_x, pickup_month_x, direction_angle_x, pickup_time_y, pickup_day_y, pickup_month_y, direction_angle_y, pickup_is_weekend)",
    "pred_final": "clip(predicted_duration_min, 3, 25)"
  },
  "column_names": [
    "vendor_id",
    "pickup_datetime",
    "dropoff_datetime",
    "passenger_count",
    "payment_type",
    "trip_distance",
    "pickup_longitude",
    "__pickup_longitude",
    "pickup_latitude",
    "__pickup_latitude",
    "rate_code",
    "store_and_fwd_flag",
    "dropoff_longitude",
    "__dropoff_longitude",
    "dropoff_latitude",
    "__dropoff_latitude",
    "fare_amount",
    "surcharge",
    "mta_tax",
    "tip_amount",
    "tolls_amount",
    "total_amount",
    "trip_duration_min",
    "trip_speed_mph",
    "pickup_time",
    "pickup_day",
    "pickup_month",
    "pickup_is_weekend",
    "arc_distance",
    "direction_angle",
    "PCA_pickup_0",
    "PCA_pickup_1",
    "PCA_dropoff_0",
    "PCA_dropoff_1",
    "pickup_time_x",
    "pickup_time_y",
    "pickup_day_x",
    "pickup_day_y",
    "pickup_month_x",
    "pickup_month_y",
    "direction_angle_x",
    "direction_angle_y",
    "standard_scaled_arc_distance",
    "predicted_duration_min",
    "pred_final"
  ],
  "renamed_columns": [
    [
      "dropoff_latitude",
      "__dropoff_latitude"
    ],
    [
      "pickup_latitude",
      "__pickup_latitude"
    ],
    [
      "dropoff_longitude",
      "__dropoff_longitude"
    ],
    [
      "pickup_longitude",
      "__pickup_longitude"
    ]
  ],
  "variables": {
    "arg_numpy_array": {
      "type": "ndarray",
      "data": {
        "values": [
          0.6002213794285794,
          0.7998339175584224
        ],
        "mask": null,
        "dtype": "float64"
      }
    },
    "arg_numpy_array_1": {
      "type": "ndarray",
      "data": {
        "values": [
          -0.7998339175584224,
          0.6002213794285794
        ],
        "mask": null,
        "dtype": "float64"
      }
    },
    "arg_numpy_array_2": {
      "type": "ndarray",
      "data": {
        "values": [
          0.5546868591368113,
          0.8320591855757253
        ],
        "mask": null,
        "dtype": "float64"
      }
    },
    "arg_numpy_array_3": {
      "type": "ndarray",
      "data": {
        "values": [
          -0.8320591855757253,
          0.5546868591368113
        ],
        "mask": null,
        "dtype": "float64"
      }
    }
  },
  "functions": {
    "_jit": {
      "cls": "vaex.expression.FunctionSerializableNumba",
      "state": {
        "expression": "((2 * arctan2(sqrt(((sin(((((dropoff_longitude - pickup_longitude) / 2) * 3.141592653589793) / 180)) ** 2) + ((cos(((pickup_longitude * 3.141592653589793) / 180)) * cos(((dropoff_longitude * 3.141592653589793) / 180))) * (sin(((((dropoff_latitude - pickup_latitude) / 2) * 3.141592653589793) / 180)) ** 2)))), sqrt((1 - ((sin(((((dropoff_longitude - pickup_longitude) / 2) * 3.141592653589793) / 180)) ** 2) + ((cos(((pickup_longitude * 3.141592653589793) / 180)) * cos(((dropoff_longitude * 3.141592653589793) / 180))) * (sin(((((dropoff_latitude - pickup_latitude) / 2) * 3.141592653589793) / 180)) ** 2))))))) * 3958.8)",
        "arguments": [
          "pickup_latitude",
          "pickup_longitude",
          "dropoff_latitude",
          "dropoff_longitude"
        ],
        "argument_dtypes": [
          "float32",
          "float32",
          "float32",
          "float32"
        ],
        "return_dtype": "float32",
        "verbose": false
      }
    },
    "_jit_1": {
      "cls": "vaex.expression.FunctionSerializableNumba",
      "state": {
        "expression": "rad2deg(arctan2((dropoff_longitude - pickup_longitude), (dropoff_latitude - pickup_latitude)))",
        "arguments": [
          "pickup_latitude",
          "dropoff_latitude",
          "pickup_longitude",
          "dropoff_longitude"
        ],
        "argument_dtypes": [
          "float32",
          "float32",
          "float32",
          "float32"
        ],
        "return_dtype": "float32",
        "verbose": false
      }
    },
    "incremental_prediction_function": {
      "cls": "vaex.ml.sklearn.IncrementalPredictor",
      "state": {
        "batch_size": 11000000,
        "features": [
          "PCA_pickup_0",
          "PCA_pickup_1",
          "PCA_dropoff_0",
          "PCA_dropoff_1",
          "standard_scaled_arc_distance",
          "pickup_time_x",
          "pickup_day_x",
          "pickup_month_x",
          "direction_angle_x",
          "pickup_time_y",
          "pickup_day_y",
          "pickup_month_y",
          "direction_angle_y",
          "pickup_is_weekend"
        ],
        "model": "gASVHQMAAAAAAACMKXNrbGVhcm4ubGluZWFyX21vZGVsLl9zdG9jaGFzdGljX2dyYWRpZW50lIwM\nU0dEUmVncmVzc29ylJOUKYGUfZQojARsb3NzlIwNc3F1YXJlZF9lcnJvcpSMB3BlbmFsdHmUjAJs\nMpSMDWxlYXJuaW5nX3JhdGWUjAhjb25zdGFudJSMB2Vwc2lsb26URz+5mZmZmZmajAVhbHBoYZRH\nPxo24uscQy2MAUOURz/wAAAAAAAAjAhsMV9yYXRpb5RHP8MzMzMzMzOMDWZpdF9pbnRlcmNlcHSU\niIwHc2h1ZmZsZZSIjAxyYW5kb21fc3RhdGWUTowHdmVyYm9zZZRLAIwEZXRhMJRHPxo24uscQy2M\nB3Bvd2VyX3SURz/QAAAAAAAAjA5lYXJseV9zdG9wcGluZ5SJjBN2YWxpZGF0aW9uX2ZyYWN0aW9u\nlEc/uZmZmZmZmowQbl9pdGVyX25vX2NoYW5nZZRLBYwKd2FybV9zdGFydJSJjAdhdmVyYWdllImM\nCG1heF9pdGVylE3oA4wDdG9slEc/UGJN0vGp/IwObl9mZWF0dXJlc19pbl+USw6MBWNvZWZflIwV\nbnVtcHkuY29yZS5tdWx0aWFycmF5lIwMX3JlY29uc3RydWN0lJOUjAVudW1weZSMB25kYXJyYXmU\nk5RLAIWUQwFilIeUUpQoSwFLDoWUaCGMBWR0eXBllJOUjAJmOJSJiIeUUpQoSwOMATyUTk5OSv//\n//9K/////0sAdJRiiUNw5BVX6WW1JsBaHXLquJcfQPj0xHpr2S3A2Cs+m30LIUAHKDYSB9wIQD/x\nR+EtyPK/27N3kO2/3L8nqdbPnOmyv24xxp/UNLy/brDNCNwZ8r/CXbWMZCzUP+dBSna3JKS/Dgd/\nSs9Bur9lwNahuRvUv5R0lGKMCmludGVyY2VwdF+UaCBoI0sAhZRoJYeUUpQoSwFLAYWUaC2JQwgg\n/6tVTrQlQJR0lGKMAnRflEdBld+4qAAAAIwHbl9pdGVyX5RLAYwQX3NrbGVhcm5fdmVyc2lvbpSM\nBTEuMi4wlHViLg==\n",
        "num_epochs": 1,
        "partial_fit_kwargs": {},
        "prediction_name": "predicted_duration_min",
        "prediction_type": "predict",
        "shuffle": false,
        "target": "trip_duration_min"
      }
    }
  },
  "selections": {
    "__filter__": {
      "type": "expression",
      "boolean_expression": "((((((((__pickup_longitude > -74.05) & (__pickup_longitude < -73.75)) & (__pickup_latitude > 40.58)) & (__pickup_latitude < 40.9)) & (__dropoff_longitude > -74.05)) & (__dropoff_longitude < -73.75)) & (__dropoff_latitude > 40.58)) & (__dropoff_latitude < 40.9))",
      "mode": "and",
      "previous_selection": {
        "type": "expression",
        "boolean_expression": "((trip_speed_mph > 1) & (trip_speed_mph < 60))",
        "mode": "and",
        "previous_selection": {
          "type": "expression",
          "boolean_expression": "((trip_duration_min > 3) & (trip_duration_min < 25))",
          "mode": "and",
          "previous_selection": {
            "type": "expression",
            "boolean_expression": "((trip_distance > 0) & (trip_distance < 7))",
            "mode": "and",
            "previous_selection": {
              "type": "expression",
              "boolean_expression": "((passenger_count > 0) & (passenger_count < 7))",
              "mode": "and",
              "previous_selection": null
            }
          }
        }
      }
    }
  },
  "ucds": {},
  "units": {},
  "descriptions": {},
  "description": null,
  "active_range": [
    0,
    116890393
  ]
}